{
  
    
        "post0": {
            "title": "Copyrights",
            "content": "Below you can find links to all the resources used when working on this book. . item source authors licence . Data on COVID-19 vaccinations shared by Our World in Data | link | link | link | .",
            "url": "https://creaitive.studio/sql/2021/03/18/copyrights.html",
            "relUrl": "/sql/2021/03/18/copyrights.html",
            "date": " • Mar 18, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "SQL is fun!: Big Query",
            "content": "SQL in action . TODO: use case demo + some intro . Building your first end-to-end project . Now that you saw an example of data project using SQL, you&#39;ll see how to build such project yourself. . Download the data . You can&#39;t do analytics without data. How you actually get it, depends on your project. When working on a business project, you may find the crucial datasets in a database of your company. That&#39;s quite convenient as you don&#39;t have to prepare and upload the data yourself. . Eventually you may stumble upon a limitations of the data at your disposal. Or you may want to work on your personal project, where you need to create your dataset from scratch. In such cases, ability to explore and use publically available datasets can be a very useful skill. There&#39;s no golden rule, but you might want to check sites like Kaggle, this repo, Dataset Search by Google or this subreddit looking for the right data for you. . In our example, we&#39;ll use the data on COVID-19 vaccinations shared by Our World in Data. You can find it in this repo. To download the data, follow the steps: . visit this link, | click on the little Raw button in the upper right corner, | when you see a comma delimited text right-click on top of it and select Save as.. option to save the file on your computer. TODO: screnshoots to bullets above? TODO: you might be wondering if there is a better way to download this file, clone repo? curl? | . Congratulations, you&#39;ve just completed the first step to get your data project up and running! . Install the database . Do you remember the cult movie from 1999 &quot;The Matrix&quot;? There was this very memorable scene where Neo was given a choice between two pills, the red one and the blue one. He had a one in a lifetime opportunity to decide whether he wants to go on living in lie or find out the truth. . There are two remarkable ascpects of this decision. First, one of the options feels to be objectively more &quot;correct&quot;. No one wants his life to be a lie. Secondly, after making this decision, there was no way back, which made it an extremely difficult choice. . At this point of the book, you also need to make a decision. There are many different database solutions and many different SQL flavours. This book covers couple of them, so you need to pick the one that you&#39;ll move on with. Compared to the dilemma that Neo faced, the decision that you are going to make is both easier and more difficult at the same time. . It&#39;s more difficult, because there is no answer which is more &quot;correct&quot; than the others. All solutions discussed in this book are widely used. All of them have advantages and disadvantages and there is no &quot;the right choice&quot;. Fortunately, unlike the Neo, you don&#39;t need to live with this decision for the rest of your life. Quite the opposite! You can start with one tool and later on come back to try another one. . It gets even better than that. There is a standard that describes the principles of the SQL language. It means that even if you learn one implementation of the SQL (e.g. SQLite) and want to switch to another one (e.g. PostgreSQL), you should be able to transfer most of your knowledge. To be clear, it doesn&#39;t mean that each vendor implements the language in an identical way. They try to follow the standard to some degree but there are some differences. Those discrepancie however are reasonable enough to make your knowledge universal most of the time. . sql lite default . TODO: matrix/table showing prons/cons of starting with each of the solutions . Interact with your database . Import the data . Run your first SQL query . Now we&#39;ll go through the SQL query that was used to prepare the data for our report. A query is a piece of SQL code that you use to get the data from the database. You can also use it to do all kinds of manipulations, like: aggregations, custom calculations, filtering, sorting and so on. . One of the reasons that I&#39;m such a huge fan of the SQL is its friendliness. SQL is a declarative language. It means that you don&#39;t need to specify all the low-lewel operations to get the desired result. You just need to describe the final outcome and the database will figure out the rest for you. . TODO: diagram to illustrate the point above . If you have some basic knowledge of English, you may be suprised that a simple SQL query can be nearly understandable to you. . TODO: simple SQL . It almost feels like a pseudocode. The cool thing is that it&#39;s an actual working query. . TODO: explain the meaning of select, from etc. . Let&#39;s see what happens when you run this code. . TODO: run code and show results from db You can now try to execute this query inside the database managament app of your choice. . Visualize your insights .",
            "url": "https://creaitive.studio/sql/2021/03/18/01_intro_big_query.html",
            "relUrl": "/sql/2021/03/18/01_intro_big_query.html",
            "date": " • Mar 18, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "SQL is fun!",
            "content": "TODO: screenshots OR GIFS for instruction . TODO: schemas, diagram to make it more pleasant to read . TODO: sqlite for python: run code and show results from db (pobierz dataset curlem??) . TODO: split Important / Tip / Note . SQL in action . TODO: use case demo + some intro . Building your first end-to-end project . Now that you saw an example of data project using SQL, you&#39;ll see how to build such project yourself :rocket: . Download the data . You can&#39;t do analytics without data. How you actually get it, depends on your project. When working on a business project, you may find the crucial datasets in a database of your company. That&#39;s quite convenient as you don&#39;t have to prepare and upload the data yourself. . Eventually you may stumble upon a limitations of the data at your disposal. Or you may want to work on your personal project, where you need to create your dataset from scratch. In such cases, ability to explore and use publically available datasets can be a very useful skill. There&#39;s no golden rule, but you might want to check sites like Kaggle, this repo, Dataset Search by Google or this subreddit looking for the right data for you. . In our example, we&#39;ll use the data on COVID-19 vaccinations shared by Our World in Data. You can find it in this repo. To download the data, follow the steps: . visit this link, | click on the little Raw button in the upper right corner, | when you see a comma delimited text right-click on top of it and select Save as.. option to save the file on your computer. TODO: screnshoots to bullets above? TODO: you might be wondering if there is a better way to download this file, clone repo? curl? | . Congratulations, you&#39;ve just completed the first step to get your data project up and running! As you may notice, it&#39;s a very simple dataset with just one table of data. We&#39;ll switch to more complex datasets later in the book. . Install the database . Choose the database . Do you remember the cult movie from 1999 &quot;The Matrix&quot;? There was this very memorable scene where Neo was given a choice between two pills, the red one and the blue one. He had a one in a lifetime opportunity to decide whether he wants to go on living in lie or find out the truth. . There are two remarkable ascpects of this decision. First, one of the options feels to be objectively more &quot;correct&quot;. No one wants his life to be a lie. Secondly, after making this decision, there was no way back, which made it an extremely difficult choice. . At this point of the book, you also need to make a decision. There are many different database solutions and many different SQL flavours. This book covers couple of them, so you need to pick the one that you&#39;ll move on with. Compared to the dilemma that Neo faced, the decision that you are going to make is both easier and more difficult at the same time. . It&#39;s more difficult, because there is no answer which is more &quot;correct&quot; than the others. All solutions discussed in this book are widely used. All of them have advantages and disadvantages and there is no &quot;the right choice&quot;. Fortunately, unlike the Neo, you don&#39;t need to live with this decision for the rest of your life. Quite the opposite! You can start with one tool and later on come back to try another one. . It gets even better than that. There is a standard that describes the principles of the SQL language. It means that even if you learn one implementation of the SQL (e.g. SQLite) and want to switch to another one (e.g. PostgreSQL), you should be able to transfer most of your knowledge. To be clear, it doesn&#39;t mean that each vendor implements the language in an identical way. They try to follow the standard to some degree but there are some differences. Those discrepancie however are reasonable enough to make your knowledge universal most of the time. You will see a note whenever we stamble upon a solution that is very specific to given tool. . Let&#39;s now start working on the database installation. In this book we use SQLite as a default option to show you the process. If you want to see instructions for other databases, visit one of the links: . Big Query (todo: in the backlog): link, | SQLite via Python (todo: in the backlog): link, | PostgreSQL (todo: in the backlog): link. . Note: As for now, the book shows all the steps needed to install the database on Windows 10. If you&#8217;re using other OS, you might want to pick Big Query. Having a browser installed is the only requirement to make it work. | . TODO: matrix/table showing prons/cons of starting with each of the solutions TODO: maybe more info in general about different dbs . Let&#39;s get started! :muscle: . SQLite introduction . In this section you&#39;ll see how to install the SQLite database. One of the reasons that SQLite is particurarly good starting point for learning is its simplicity. The entire database is contained in just one file. Setting it up is trivial. It requires hardly any installation and no configuration at all. It&#39;s free, so you can use it to its limits without worring about the costs. . Beware and don&#39;t let the simplicity disguise you. It is a fully reliable database with most of the features that you would expect from the modern SQL database. It&#39;s characteristics make it a perfect choice for: . smartphones and other devices, | websites, | data analytics, | and many more. | . Developers of the SQLite boast that it&#39;s likely the most popular database in the entire world. They also strive to keep it reliable until 2050. . Truth be told, SQLite as a bit different than its more traditional brothers - fully fledged relational database management systems (RDBMS), like PostgreSQL, SQL Server or Oracle. It&#39;s not a good choice for every use case. You may decide to choose an alternative, if your project requires: . accessing the database directly from many computers at the same time, | simultaneous modification of the data by many users, | working with very large amounts of data (although it officially can handle up to 281 terabytes, having to keep it in one file is the bottleneck here). | . It also has some unusual behaviours that are distinct from what you will find anywhere else. Everytime we face such behaviour, you will see be informed about it. You can also get familiar with the full list in advance using the official documentation. You can an example of a note below. . Note: SQLite is not a replacement for more traditional solutions. Unlike most databases it doesn&#8217;t come with a dedicated server. That&#8217;s why the use cases for this tool are different from use cases handled by standard database management systems. . At this point you should be aware that there&#39;s no single perfect database solution. Features of SQLite make it an amazing candidate for learning and that&#39;s why we use it as a default technology in this book. With SQLite you&#39;ll get a great ratio of &quot;using the SQL&quot; vs &quot;trying to setup the database&quot;. Finally, if you&#39;re not sure which technology you should start with, remember, you&#39;re not like Neo. You are free to start with one option and switch to something else whenever you want. Most of your knowledge will be easily transferable. . SQLite installation . TODO: here or earlier - database installation is needed to follow the excercises . You&#39;ll now see how to set up your own SQLite database. As mentioned before, this instruction shows how to do it in Windows 10. Let&#39;s get started :rocket: . First you need to visit the SQLite Download Page. You&#39;ll see a list with different sections. Go to &quot;Precompiled Binaries for Windows&quot; and find the link for &quot;bundle of command-line tools&quot;. Click on the link to download the .zip file. . | Right click the .zip file and uncompress it. SQLite is portable, you don&#39;t need to install it. Actually, you can start using it right now. . | Go to catalog with three files: &quot;sqldiff.exe&quot;, &quot;sqlite3.exe&quot; and &quot;sqlite3_analyzer.exe&quot; and open &quot;sqldiff.exe&quot;. . | You will now see a terminal where you are able to run different SQLite commands. To create a database, we need to use following command .open your_path, where your_path stands for the path of your new database. You can replace it with ./covid.db that will create a new database inside your current directory. The full command would be .open ./codiv.db. If you wan&#39;t to provide a full path, you need to use &quot;/&quot; instead of &quot; &quot; to specify it. . | Remember that SQLite database is just a file? You can double check if it worked by going to the folder and checking if you can see a new file ./covid.db. . Tip: If you don&#8217;t see the file with your database, try typing .databases insinde the SQLite terminal and double check once again. . | You can now close your terminal. You&#39;ve just successfully created an SQLite database! You will see how to interact with your database in a beginner-friendly way in the next section. . Tip: If for some reason you struggle to create a new database using the standard approach, move forward to the next section. You will see an alternative way of achieving the same results. | Interact with your database . Once you have your database created, you can start using it. There are plenty of tools that provide a user interface just for that. One of them, that is free, very easy to start with and intuitive to use is SQLiteStudio. It is designed specifically for SQLite databases. Let&#39;s try to install it. . Visit official SQLiteStudio website and click &quot;Download&quot; button. After a while, you will see a new .zip file downloaded to your computer. | Uncompress the file an open the new folder that appeared on your computer. You should find an &quot;SQLiteStudio&quot; directory inside that folder. | This step is optional but recommended. Move the &quot;SQLiteStudio&quot; folder to the place, where you would like to store it permamently (e.g. your C: drive). You can create a shortcut to &quot;SQLiteStudio.exe&quot; file for easy access e.g. from your Desktop. | Inside &quot;SQLiteStudio&quot; directory, you will find an &quot;SQLiteStudio.exe&quot; file. You can already click it to open the tool. . Tip: It is possible that you will be shown a Windows warning about opening non-trusted application. &quot;SQLiteStudio&quot; is an open source project and all of its code is available for the public. As you can find out in an official GitHub repo, it&#8217;s maintained for a couple of years and many people are using it. You can safely ignore the warning. That&#39;s it! No further installation required. I told you that it&#39;s easy! Let&#39;s now connect SQLiteStudio to the database created in the previous step. . | First, click on the &quot;Database&quot; menu and then select &quot;Add a database&quot; option. . | Let&#39;s keep &quot;SQLite 3&quot; as a database type. In the &quot;File&quot; section enter the path to your database file (covid.db) or click on the folder icon to select it from your computer. . Tip: As you can see, SQLiteStudio provides you with an even simpler way of creating new database file. All you need to do is to click a green icon &quot;Create new database file&quot;. 3. SQLiteStudio will set a name for your database by default but you can change it. You can also decide wheter you want to see your database each time you open the app by checking the &quot;Permanent&quot; option. | You can now &quot;Test connection&quot; and hit &quot;OK&quot; if everything works fine. | Great! Your database is now connected to the tool that you&#39;ll be using. If you try to see what&#39;s inside, you&#39;ll find out that the database is empty, which makes a lot of sense. You&#39;ve just created it from scratch. In the next section you will see how to feed the &quot;COVID-19 vaccinations&quot; dataset into your database. Along the way, you&#39;ll also discover different features of SQLite and SQLiteStudio. . Import the data . To import the dataset right click on the database name in the &quot;Databases&quot; pane or click on the &quot;Tools&quot; menu and select an &quot;Import&quot; option. You will be asked to provide database and table names that will store your data. We only have one database at this point. For the name you can choose whatever you want. We&#39;ll be using &quot;country_vaccinations&quot; name in the following sections of this book. . After hitting &quot;next&quot; you will be asked to specify a couple of options: . data source type - the format of input file that you&#39;re using, CSV in our case; | input file - path to the file with your data; | text encoding - we&#39;ll just use default system encoding; | ignore errors - whether you want to stop the import in case of any errors, make sure to leave it unchecked; | first line represents CSV column names - whether the first row in your file represents column names; | field separator - character that is used to separate column in your file; | null values - we&#39;ll explore this option later in the book. | . To make a proper selection for some options, you need to know how your csv file is built. You can do it quite easily. Under the hood a csv file is just a text document representing a table of data. Each new line represents a new row and columns are separated with some character. Comma is the most popular choice, hence the name &quot;comma-separated values&quot;. You can also stumble upon other separators, like semicolon (&quot;;&quot;) or tab (&quot; t&quot;). . Technically the csv name and file extension are not a perfect fit if you don&#39;t use commas as your separators. However, you&#39;ll often see that people use this format anyway even when the separator is different. As it&#39;s still a text file, it will work just fine. . Tip: You may come across a &quot;tsv&quot; file. It&#8217;s a specific name for a delimited file that uses tabs as separators. In most of the tools, you should be able to import it using &quot;import csv&quot; option and selecting tab or &quot; t&quot; as your delimiter. Back in our case, to check if the first line of our file contains header, you can open it using any text editor. Notepad is the simplest option. Right click on your file, choose &quot;Open with...&quot; and select Notepad from the list. When you have your file opened, you can check the first line of the text. You will see values like: &quot;country&quot;, &quot;iso_code&quot;, &quot;date&quot;, &quot;total_vaccinations&quot; which definitely look like a column names. Make sure to check &quot;first line represents CSV column names&quot; option in SQLiteStudio. . Last but not least, field separator. Looking at couple of the first rows, you can clearly see that values are separated with commas, e.g.: &quot;country,iso_code,date,total_vaccinations...&quot;, &quot;Albania,ALB,2021-01-10,0.0...&quot;. Make sure to select &quot;, (comma)&quot; as a field separator. . You&#39;re now ready to import your data. Click a &quot;Finish&quot; button to start the process. After a short moment, you will see a new table in your database. . Run your first SQL query . Running the query . Now we&#39;ll go through the sample SQL query that is very similar to the one used in our report. A query is a piece of SQL code that you use to get the data from the database. You can also use it to do all kinds of manipulations, like: aggregations, custom calculations, filtering, sorting and so on. . One of the reasons that I&#39;m such a huge fan of the SQL is its friendliness. SQL is a declarative language. It means that you don&#39;t need to specify all the low-lewel operations to get the desired result. You just need to describe the final outcome and the database will figure out the rest for you. . TODO: diagram to illustrate the point above . If you have some basic knowledge of English, you may be suprised that a simple SQL query can be nearly understandable to you. . SELECT country, date, daily_vaccinations FROM covid.country_vaccinations WHERE COUNTRY = &#39;United States&#39; ORDER BY date DESC; . It almost feels like a pseudocode. The cool thing is that it&#39;s an actual working query. You start with choosing or selecting columns that you want to use. Next, you specify which database and which table you want to get your data from. You only request rows where certain condition is met. Finally you put your results into specific order. You probably wouldn&#39;t be able to write it yourself but it makes an intuitive sence. We&#39;ll spend much more time learning how to build your own sql queries later in the book. . You can try to execute this query inside the SQLiteStudio. Click on Tools in the top menu and select &quot;Open SQL editor&quot;. You will see a new window where you can type some text. Copy or even better rewrite the SQL code inside this editor. . Tip: Although copying and rewriting the code will provide you with the same result, typing the code yourself can be an effective learning technique. To execute the query and see results you can either click on the &quot;play button&quot; or hit &quot;F9&quot; on your keyboard. Outcome will be displayed in a table below the editor. As expected, you should see information about daily vaccinations in USA sorted descending by date. . Formatting the query . If this is the first time you use SQL code, you&#39;ll probably start to have questions. . Does capitalization matter? | Do I need to keep split the code into lines in the same way? | Will it work if I don&#39;t indent? | Is semicolon at the end required? | . Before I give you answers, let me emphasize how cool it is to write code. In real or &quot;physical&quot; life, if you try some approach that doesn&#39;t work, most often than not, you break something. Usually it&#39;s painful because you need to either fix or replace whatever is broken. Writing code is a completely different world. Very often the worst thing that can happen is seeing an error. It&#39;s almost like you are in a wonderland where you can push your imagination to the limits withouth caring too much about consequences. Of course if you push to hard, you are capable of causing some damage but I can assure you that it won&#39;t happen while writing basic SQL queries. Having say that, I&#39;d strongly recommend you pausing here for a moment an testing yourself what can happen if you violate any of the assumptions from the list above. . TODO: some graphic to avoid spoilers? . Ready to find out the answer? Try using the code below and see what happens. . select country, date, daily_vaccinations from covid.country_vaccinations where country = &#39;United States&#39; order by date desc; . Good news is that nothing exploded. Even better news is that it works exactly the same as the previous version. If it doesn&#39;t matter why bother splitting the code or making indentations? In short, all those things do not matter for the computer. The thing is that we&#39;re not computers. It&#39;s much more easy and predictable to read, modify and work with the query if it&#39;s nicely formatted. Especially if it&#39;s a long and a complex one. You can already notice the difference in the simple example above. Imagine having not ten but a hundred lines of code that you need to update. . Your future self will probably not thank you if you take a good care about formatting. But you can be sure that it will curse if you don&#39;t. That&#39;s why this book follows a couple of simple principles when formatting code. . Create a new line for each main keyword (SELECT, FROM, WHERE, ORDER BY), column, where condition, expression. | Indent everything between main keywords. | Use semicolon to split many queries written one after the other (it makes your editor aware that these are separate pieces of code). | Capitalize keywords (that&#39;s my latest principle that I&#39;m least strict about). | This is a set of principles that I&#39;ve worked out using SQL for years. They tend to work very well for me. It&#39;s not fully comprehensive list and definitely not written in stone. As fair as I know, there is no one standard that everyone should follow. Feel free to experiment and modify the assumptions above to craft your own formatting style. As long as you keep your future self and your colleagues in mind, you should be fine. . Share your work . When you have your data prepared, it&#39;s time to share it with your audience. You can do it in many different ways. One of the most effective ones is creating an interactive dashboard. In the next section you&#39;ll see how to set up a bi tool on your machine to start working on the first vizualizations. This section is not strictly related with the SQL language itself so you might be tempted to skip it over. Having in mind that presenting the data is one of the most important parts of the data project, I&#39;d recommend at least taking a quick look. This way you&#39;ll build a high-level understanding of the process. . Install a BI tool . There are plenty of great BI tools on the market. The differ in features, pricing models and ease of use. We won&#39;t compare them here as this river is vastly too deep to go into. Instead, we&#39;ll use one tool, PowerBi in our case. It&#39;s very robust, popular and fast developing. In short, it&#39;s a tool that&#39;s worth knowing in general. Plus it&#39;s free to install on your computer, although buying a commercial license is required to share your work with others. . You can install PowerBi from the official Microsoft website. Click the &quot;Download&quot; button and follow the instruction. . After succesfull installation, you should be able to open PowerBI Desktop. You&#39;ll see some prompts that will help you to log in or buy a licencse if you need one. You can ignore them at the moment to go to the main interface of the tool. . TODO: screenshot: prompt TODO: screenshot: you should see similar interface . If you select &quot;Get data&quot; from the &quot;Home&quot; menu, you&#39;ll see that PowerBI works with many different data sources out of the box, without further configuration required. . TODO: screenshot . Unfortunately, SQLite is an exception in this case. To make the two applications talk to each other, you need to install additional driver that you can find here. Depending on whether you&#39;are on 32 or 64-bit version of windows, choose either &quot;sqliteodbc.exe&quot; or &quot;sqliteodbc_w64.exe&quot;. After successfull installation, you&#39;ll be able to connect your PowerBI Desktop app to the SQLite database prepared in the previous step. . Connect BI tool to the database . To make the connection, go to the &quot;Home&quot; menu and click on the &quot;Get data&quot; icon. Choose &quot;more...&quot; to open a new window where you&#39;ll be able to find &quot;ODBC&quot; option. After selecting this option, click on the &quot;Connect&quot; button. Select &quot;SQLite3 Datasource&quot; and expand &quot;Advanced options&quot;. Next, you need to define &quot;Connection string ...&quot; field, which has database=absolute_path_to_your_db format. The parameter absolute_path_to_your_db is just a path to the database file created in one of the previous steps. . TODO: consider how variables should be shown in text . Tip: If you&#8217;re not sure about your absolute path, you can right-click on the database file created in on of the previous steps. Next, choose &quot;Properties&quot; and &quot;Security&quot; that will lead you to the full path of the file (text field at the very top). You can copy it and use in your connection string. In the SQL statement box, you can use a custom sql to extract the data. If you don&#39;t specify it, you&#39;ll be able to use the entire table. That&#39;s good for our small, example dataset. Probably not very good for big, productional data sources. Let&#39;s use the query from the previous sections. Because we are connecting specifically to the covid db, we need to remove covid. prefix in the from clause. . SELECT country, date, daily_vaccinations FROM country_vaccinations WHERE COUNTRY = &#39;United States&#39; ORDER BY date DESC; . To complete the process, paste the above query and hit &quot;Ok&quot;. When asked about password, switch to the &quot;Default or Custom&quot; option in the menu, leave all the field blank and continue. If everything went right, you&#39;ll see a table wit sample data. Click &quot;Load&quot; to import it to PowerBI. After the whole process you will see your data import in the &quot;Fields&quot; menu. . TODO: - SQLite connector - SQL from previous point to create a time series (not USA, not ordered) - one more SQL to create a map .",
            "url": "https://creaitive.studio/sql/2021/03/18/01_intro.html",
            "relUrl": "/sql/2021/03/18/01_intro.html",
            "date": " • Mar 18, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website was created by creaitive.studio - self learning for everyone. .",
          "url": "https://creaitive.studio/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://creaitive.studio/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}