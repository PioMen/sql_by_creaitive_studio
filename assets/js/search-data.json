{
  
    
        "post0": {
            "title": "Copyrights",
            "content": "Below you can find links to all the resources used when working on this book. . item source authors licence . Data on COVID-19 vaccinations shared by Our World in Data | link | link | link | .",
            "url": "https://creaitive.studio/sql/2021/03/18/copyrights.html",
            "relUrl": "/sql/2021/03/18/copyrights.html",
            "date": " • Mar 18, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "SQL is fun!: Big Query",
            "content": "SQL in action . TODO: use case demo + some intro . Building your first end-to-end project . Now that you saw an example of data project using SQL, you&#39;ll see how to build such project yourself. . Download the data . You can&#39;t do analytics without data. How you actually get it, depends on your project. When working on a business project, you may find the crucial datasets in a database of your company. That&#39;s quite convenient as you don&#39;t have to prepare and upload the data yourself. . Eventually you may stumble upon a limitations of the data at your disposal. Or you may want to work on your personal project, where you need to create your dataset from scratch. In such cases, ability to explore and use publically available datasets can be a very useful skill. There&#39;s no golden rule, but you might want to check sites like Kaggle, this repo, Dataset Search by Google or this subreddit looking for the right data for you. . In our example, we&#39;ll use the data on COVID-19 vaccinations shared by Our World in Data. You can find it in this repo. To download the data, follow the steps: . visit this link, | click on the little Raw button in the upper right corner, | when you see a comma delimited text right-click on top of it and select Save as.. option to save the file on your computer. TODO: screnshoots to bullets above? TODO: you might be wondering if there is a better way to download this file, clone repo? curl? | . Congratulations, you&#39;ve just completed the first step to get your data project up and running! . Install the database . Do you remember the cult movie from 1999 &quot;The Matrix&quot;? There was this very memorable scene where Neo was given a choice between two pills, the red one and the blue one. He had a one in a lifetime opportunity to decide whether he wants to go on living in lie or find out the truth. . There are two remarkable ascpects of this decision. First, one of the options feels to be objectively more &quot;correct&quot;. No one wants his life to be a lie. Secondly, after making this decision, there was no way back, which made it an extremely difficult choice. . At this point of the book, you also need to make a decision. There are many different database solutions and many different SQL flavours. This book covers couple of them, so you need to pick the one that you&#39;ll move on with. Compared to the dilemma that Neo faced, the decision that you are going to make is both easier and more difficult at the same time. . It&#39;s more difficult, because there is no answer which is more &quot;correct&quot; than the others. All solutions discussed in this book are widely used. All of them have advantages and disadvantages and there is no &quot;the right choice&quot;. Fortunately, unlike the Neo, you don&#39;t need to live with this decision for the rest of your life. Quite the opposite! You can start with one tool and later on come back to try another one. . It gets even better than that. There is a standard that describes the principles of the SQL language. It means that even if you learn one implementation of the SQL (e.g. SQLite) and want to switch to another one (e.g. PostgreSQL), you should be able to transfer most of your knowledge. To be clear, it doesn&#39;t mean that each vendor implements the language in an identical way. They try to follow the standard to some degree but there are some differences. Those discrepancie however are reasonable enough to make your knowledge universal most of the time. . sql lite default . TODO: matrix/table showing prons/cons of starting with each of the solutions . Interact with your database . Import the data . Run your first SQL query . Now we&#39;ll go through the SQL query that was used to prepare the data for our report. A query is a piece of SQL code that you use to get the data from the database. You can also use it to do all kinds of manipulations, like: aggregations, custom calculations, filtering, sorting and so on. . One of the reasons that I&#39;m such a huge fan of the SQL is its friendliness. SQL is a declarative language. It means that you don&#39;t need to specify all the low-lewel operations to get the desired result. You just need to describe the final outcome and the database will figure out the rest for you. . TODO: diagram to illustrate the point above . If you have some basic knowledge of English, you may be suprised that a simple SQL query can be nearly understandable to you. . TODO: simple SQL . It almost feels like a pseudocode. The cool thing is that it&#39;s an actual working query. . TODO: explain the meaning of select, from etc. . Let&#39;s see what happens when you run this code. . TODO: run code and show results from db You can now try to execute this query inside the database managament app of your choice. . Visualize your insights .",
            "url": "https://creaitive.studio/sql/2021/03/18/01_intro_big_query.html",
            "relUrl": "/sql/2021/03/18/01_intro_big_query.html",
            "date": " • Mar 18, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "SQL for Analysts - Getting started",
            "content": "TODO: new dataset, report, sql - more business oriented and a bit more complex (two tables at least) . TODO: sqlite for python: run code and show results from db (pobierz dataset curlem??) . TODO: split Important / Tip / Note + formatting . TODO: how to deal with links in the printed version?? . TODO: schemas, diagram to make it more pleasant to read . TODO: screenshots OR GIFS for instruction . TODO: align naming of csv/.csv/... files . TODO: make sure that I use word database correctly - if we have multiple databases it&#39;s probably a warehouse . Getting started . give it a way: learning manifesto and abstract away . There are plenty of great materials out there that will give you a full introduction and historical context to the subject of SQL, before moving to practice. In this book, we take a slightly different approach. I will try to give you an amount of information that is &quot;just right&quot; to get a rough understanding of the subject and start practicing. This approach has many benefits. One of them is that you will find out very soon if SQL is difficult and fun for YOU. . Tip: If you prefer to learn the more &quot;traditional&quot; way, &quot;SQL for Mere Mortals&quot; by John Viescas and Michael J. Hernandez (TODO: add link) is an amazing book that I can highly recommend. To give you an idea about what you may expect in this chapter, let me show you a plan that we will follow. First, I&#39;ll give you an example of the analytical project that was built using SQL. Then, you will go behind the curtain to get a step by step guide to recreate it on your own. At every step of the process, I will provide you with enough details to fully understand what you&#39;re doing. . TODO: be more explicit about benefits of this approach . TODO: what does it mean that sql is a declarative language; It&#39;s a declarative language, which means that you use it to describe what you want to achieve, not all the underlying operations. The difference is real. It&#39;s like sketching your dream house on a piece of paper vs creating a fully fledged construction project on your own. . TODO: LEGO analogy - a graphic with lego bricks called &quot;select&quot;, &quot;from&quot;, &quot;join&quot;, etc. You can build almost any house combining them, you won&#39;t build a car. Bricks in order to show execution order. Imagine that you have an almost infinite supply of 10 types of bricks. These are not random bricks. They were carefully selected by very smart people. Now, if you combine them properly, you can build almost anything you can imagine. To learn SQL, you need to master the fundamental clauses and learn how to combine them. The proces of writing SQL queries always reminds me of a Lego bricks. That&#39;s how I feel when I write SQL code. . TODO: bugs when working with data - not only technical, but also the logic . TODO: this section is more about working with data in general: Bonus: **Sweetspot between IT and business** There is a group of people who like coding but could not imagine themself doing that all day long. Working with data allows you to find a role that will require both coding and solving business problems. PS. If you actually are into hardcore coding marathons, you should be able to find something for yourself too. . Bonus: **SQL vs spreadsheets** If you are coming from a spreadsheet world, you probably wonder how does working with SQL compare to working with spreadsheets. The main benefit is that SQL is much better at providing consistency. Have you ever failed to update your formula when refreshing your report? That will not happen with SQL. You design your logic and keep it in a sql script that will work exactly the same each and every time. It&#39;s like you took all of your knowledge about what you need to do and wrote it down in a file. You don&#39;t need to do every step yourself. You dramatically reduce the risk of a human error. . TODO: tip: names of the tables and &quot;_&quot; . What is a database? . If you&#39;re just getting started a word &quot;database&quot; can seem quite overwhelming. If you give it a try though, it&#39;s not that difficult to understand why people have developed such thing and why they&#39;ve become so popular. . In plain words, a database is an organized collection of information. Notice, that at this point, there is no mention of computers at all. The simplest database can be really simple. Only two pieces are required: . some information and | some organized way to store it. . Tip: What&#8217;s the simplest example of a database that comes to your mind? Think about it for two minutes before reading on. The very basic database can be as simple as a shopping list. It stores information about things that you want to buy. A slightly more complex examples would be a patient card, a phone book or a home budget. If you think about it, databases are everywhere. | . A very basic database, like a shopping list, could be stored on something as simple as a piece of paper. A phone book, which is slightly more complex, would require, well, lots of pages :sunglasses: For a home budget, a spreadsheet could be a wise choice. You can feel that there is some kind of a relationship here. The more data you have, the more advanced tool you need. . If you think about companies, they store much more data that you ever could. Even a small, traditional business like a physical store, needs to keep track of all the transactions, supplies, bank accounts, employees, salaries and the list goes on. . Dealing with such amounts of data is a difficult task. That&#39;s why people had to invent a way to do that. Nowadays this knowledge is built into database systems, tools designed specifically for this task. In practice, people often call such systems databases. That&#39;s what they usually mean when they say this word. . Tip: Database system (often referred to as a database) is a piece of software developed precisely to store and manage data on computers. There are many database solutions on the market. Some of them are free, while the other require some kind of payment. A good very good thing is that most of them: . look familiar when you start using them and | support SQL as the main way to work with data. | . What kind of data is stored in a database? TODO: add to previous point . The kind of data stored in a database depends heavily on the organization. For example a university will store different information than online store. The first one will most likely keep the records of students, teachers, courses, grades, rooms and so on. The online store will be more focused on things like customers, transactions, web traffic, marketing campaigns, etc. In general, every data point that is important for given organization, should have its place in a database. . What&#39;s a table? . TODO: If I were to describe what does a database look like inside, I&#39;d say that it&#39;s built of tables . Although there are plenty of different database system out there, from the end user perspective most of them seem pretty similar. That&#39;s because they all use tables to organize data. If you take a look inside a database system, that&#39;s what you are most likely to see: a collection of tables. . Tip: A good news for you is that if you learn to move around in one database system, you will be able to easily switch to another one if needed. Tables are used to store data. Each table is usually focused around one type of items. These can be things like physical objects (goods in stock, rooms in a building), events (purchases, clicks on a website), people (customers, employees) or some intangible concepts (salaries, exchange rates). . TODO: a table with organization types and sample items stored . For example, a database of an online store could contain following tables: . transactions, | customers, | page_views, | marketing_campaigns. | . You can expect that a table related to a given type of items, contains data about these items. For example, a &quot;transactions&quot; table will host characteristics of every sale made by a company. Similarly, a table related to &quot;customers&quot; will store all the relevant information about the clients. . What a table is built of? . Each table in a database is built of two main components, rows and columns. . TODO: a look inside an actual table - with columns highlighted . What&#39;s a row? . Rows represent individual items stored in a table. For example a &quot;transaction&quot; table could have a separate row for each transaction while an &quot;employees&quot; table might keep a separate entry for each employee. Each course tought at university, would have it&#39;s own record too. You get the idea :wink: . TODO: underlina that this is a typical setup . What&#39;s a column? . Columns are used to keep information about characteristics of different items stored in a table. Almost every item imaginable has some features. For example, a transaction can be described using: unique id, date, price, article, seller, buyer, shipment and so on. All these pieces of information are usually stored in columns. . What is a SQL? . TODO: sql is a language that allows you to communicate with a database . SQL is a language that allows you to interact with data inside a database. You can use it to display, modify, and delete data. It supports many operations, like aggregating, filtering, sorting and joning data. You use it by writing instructions which are often called statements. . What does it mean that SQL is a declarative language? . SQL is a declarative language, which means that you use it by describing what you want to achieve, not how exactly you want to do that. You don&#39;t need to specify all the low-lewel operations to get the desired result. You just describe the final outcome and database figures out the rest for you. You may be surprised that knowledge of some basic English words can be nearly enough to understand simple SQL queries. . Why should I learn SQL? . SQL is a great piece of technology. You may be wondering though if it&#39;s the right tool for you. I&#39;ll give you five reasons why I think you will love SQL. . 1. Popular SQL is one of the most popular tools used to work with data. Almost any company uses some kind of a database and vast majority of them support SQL. Many job postings for data-related roles, especially in analytics, mention SQL as one of the key skills to have. SQL can be a very valuable addition to your skillset. . 2. Powerfull SQL has become a de facto standard in a data world. It&#39;s not only used in a classical, relational databases but also in big data and even streaming solutions. It means that you can use it to work with all kinds of datasets, from hundreds, to even billions of rows. Learning SQL can make you very capable in a data world. . 3. Easy to learn Unlike many other languages, SQL has a very compact syntax. You can perform most of the common operations after learning a dozen or so of the most fundamental commands and combining them in a proper way. It&#39;s like building your code using a lego-like blocks. It makes the learning process very friendly and enjoyable. . 4. Great starting point If you have no prior coding experience, SQL is a great place to start. With a gentle learning curve it allows you to find out very quickly if you enjoy writing code. The learning itself is also very satysfying. You write code and results pop up on your screen almost immediately. It doesn&#39;t take long for your skills to become useful. A couple of weeks is sufficient to start using SQL in practice. . These are the main benefits of SQL that I&#39;ve found. I hope that you will enjoy using it just as much as I do. Give it a try and find out yourself! . What&#39;s a SQL query? . For example to read data from a database you use select statements that are also known as queries. . What&#39;s does a SQL query look like? . Let&#39;s go through a simple SQL query to see what it feels like to use it. A query is a piece of SQL code that you can use to get data from a database. You can use it for example to feed data into report. This particular query was used to create a map in our report showing rental prices on Airbnb. . You will now see what I meant by saying that SQL is such a friendly tool. It&#39;s a declarative language, which means that you don&#39;t need to specify all the low-lewel operations to get the desired result. You just need to describe the final outcome and the database will figure out the rest for you. If you have some basic knowledge of English, you may be suprised that a simple SQL query can be nearly understandable to you. . TODO: replace queries with the new dataset . SELECT country, date, daily_vaccinations FROM covid.country_vaccinations WHERE COUNTRY = &#39;United States&#39; ORDER BY date DESC; . It almost feels like a pseudocode. The cool thing is that it&#39;s an actual working query. You start with choosing or selecting columns that you want to use. Next, you specify which database and which table you want to get your data from. You only request rows where certain condition is met. Finally you put your results into specific order. You probably wouldn&#39;t be able to write it yourself but it makes an intuitive sence. We&#39;ll spend much more time learning how to build your own sql queries later in the book. . You can try to execute this query inside the SQLiteStudio. Click on Tools in the top menu and select &quot;Open SQL editor&quot;. You will see a new window where you can type some text. Copy or even better rewrite the SQL code inside this editor. . Tip: Although copying and rewriting the code will provide you with the same result, typing the code yourself can be an effective learning technique. . To execute the query and see results you can either click on the &quot;play button&quot; or hit &quot;F9&quot; on your keyboard. Outcome will be displayed in a table below the editor. As expected, you should see information about daily vaccinations in USA sorted descending by date. . What are the limitations of SQL? . TODO: clean this section . To be fair, like any other tool, SQL has it&#39;s own limitations as well. Here&#39;s the major one. . 1. Limited by design . designed specifically to handle data, that&#39;s why it&#39;s so good with it, if you need other things, you should check out other technologies . It&#39;s more of a feature that an issue but SQL was designed with a specific purpose in mind: manipulating data in a database. Having this assumption makes it a very friendly, logical and coherent language for this purpose. But it&#39;s fair to point out that it also imposes some limitations. If you&#39;re looking for a single tool that will manipulate the data, create some charts, save them to pdf and sent via e-mail - SQL is not a go to solution. It&#39;s a choice between versatility and accessibility. You can find tools that are more universal but they will surely have a steeper learning curve. SQL provides a great balance between the two. complex statistics, ML model . A short advice . TODO: give it a name: a short advice on learning and abstract away . While learning SQL, you might want to get as much knowledge as possible from the effort that you invest. There&#39;s a simple trick that you can use to boost your chances of success. Would you skip this opportunity? . There are lots of reasons why you might want to learn a new skill. People are usually more succesfull when they have a very explicit goal in mind. So before you jump in to the book for good, take a minute or two, to think about your motivation. By motivation I mean, a specific outcome that you want to get after completing the material. When you&#39;re ready, write it down and keep it in a visible place, so you can take a look from time to time. At the very end, you&#39;ll be able to check how well you did pursuing your goal. . To make this technique work even better, think for a couple of minutes about the specific actions that you can take to achieve your goal. When you&#39;re ready, write them down. The more specific you get, the better. . Next, think about obstacles that may stand on your way and prevent you from taking actions that you&#39;ve just described. Write down all the ideas that you have. Think about ways to overcome these obstacles and make notes. This way, you&#39;ll be prepared when they start to affect you. . To better illustrate that. Your goal might be to &quot;start using SQL at your work&quot;. To achieve that, you plan to &quot;spend 30 minutes every day reading this book&quot;. The obstacle that can stand in your way is that &quot;you only have time for reading in the evening, when you&#39;re too tired&quot;. How to overcome that? You can try to &quot;get up half an hour earlier and start your day with learning&quot;. . Tip: If you&#8217;re looking for ways to increase the amount of time you have for learning or other activities, I highly recommend the &quot;Make Time&quot; book by Jake Knapp and John Zeratsky. It&#8217;s a great guide that will teach you how to have more time to do things that you really want to do. Check it out! TODO: make time book link That&#39;s it, you&#39;re now prepared to start your learning journey effectively :rocket: . Important: If you would like to support this project and help others in their learning adventure, you can share your thoughts about goals, actions and obstacles using this link. I will use this information to think about ways of improving the content over time to help future readers achieve their goals. TODO: add link . SQL in action - the hands on approach . You should now have a very basic feeling about the benefits of learning SQL and hopefully some meaningful goal in mind. You will now see first-hand, how SQL can be used in practice. We will use this opportunity to clarify some concepts and prepare you for the next section, where you&#39;ll be given a chance to build similar project yourself. Buckle up! . First, imagine that you are a Data Analyst at a well known, data-driven company. Your job is to transform the data into insights and help to make a good business decisions. There are plenty of ways to do it. One of them is making this data available at a fingertips of the people in your company. You can achieve that by preparing and sharing all kinds of reports. . Modern companies use BI tools to address their reporting needs. A BI tool is a program designed specifically for this purpose. It allows to build reports, aka dashboards, that are automated, interactive and easy to share. An effective report prepared in a BI tool allows users to play with the data on their own. Filtering, drill down and other manipulations should be available in real time, without need to use help from a Data Analyst. . Some of the most popular BI tools, like Tableau, PowerBI or Data Studio, provide access to a so-called gallery. It&#39;s a place where you can find a colletion of sample dashboards prepared by the community. I really recommend you visiting them, to get a feeling of what you may expect from a modern BI tool (Tableau Gallery, PowerBI Data Stories Gallery, Data Studio Report Gallery). . In this book we&#39;ll use a simple dashboard to teach you about the lifecycle of exemplary analytical project built with SQL. It&#39;s a very simple report with a map that shows prices of different apartments offered for rent via Airbnb in Bergamo, Italy. . TODO URGENT: screenshot + link TODO URGENT: elaborate on the dashboard: you can see x, y; users can filter ... . You should now have a feeling how capable BI tools can be. They allow for interactivity unimaginable with traditional, static reports. A wise question to ask at this point would be, how can you actually start using such tool. . The answer is that most frequently, the first step is to connect your report to the data that you want to use. That&#39;s where SQL typically comes into play. It allows you to transform the data stored in a database and import it to the tool. After that, you can use different in-built functions to create a report. Finally, you can share your report with the audience. Below you can find a diagram that captures this process. . TODO: diagram of the high-level process: database -&gt; sql -&gt; data import -&gt; bi manipulations and sharing . In the next section we will discuss each of the steps in details, so you can build some understanding of these concepts. Next, you will see what actions were taken to create dashboard with Airbnb prices in Bergamo. You will also have a chance to get your hands dirty by trying to build it on your own :rocket: . DIY data project . Storing data in a database . What is a database? . Most companies store their data in some kind of a database. In the simplest words, a database in general is an organized collection of information. Notice, that at this point, there is no mention about computer systems or the amount of this information. The simplest database can be really simple. Only two components are required: . a piece of information and | some organized way to store it. . Tip: What&#8217;s the simplest example of a database that comes to your mind? Think about it for two minutes before reading on. The very basic database can be as simple as a shopping list. It can store information about what you want to buy. Slightly more complex examples would be a patient card, a phone book or a home budget. If you think about it, databases are everywhere. | . You&#39;ve probably noticed that a very basic database, like a shopping list, could be stored on something as simple as a single piece of paper. A phone book would require, well, lots of pages :sunglasses: To make it more convenient, an interactive application would be even better. For a home budget, a spreadsheet could be a wise choice. The general principle is, the more data you have, the more advanced tool you need. . As you can imagine, data used by companies is far more complex than what an average person typically use. Even a relatively simple business like a single, brick and mortar store, needs to keep and process information about each transaction, the supplies, bank account operations, accounting and so on. And that&#39;s just a tip of an iceberg. Companies may want to add to this list a bunch of non-required information that helps to build a competitive advantage, like store visitors (curious? see this), promotions, marketing campaigns, loyalty programs and many more. . TODO: update the link . Obviously, a chain of thousands of stores would need to handle this information at scale, for each and every physical locations. That&#39;s even without mentioning tech companies with thousands or millions of users that track every mouse movement and every key that you hit on your keyboard. In short, the amount of information used by the companies is overwhelming. . That&#39;s why being able to handle this information requires tools designed specifically with that purpose in mind. A database, in this context, would be a piece of software developed precisely to store and manage data. Modern databases are suitable to manage data at enterprise-level in a reliable, effective and secure way. From now on, whenever you see a word database in this book, that&#39;s what it means. . Database ecosystem is very rich with a variety of solutions. Some of them are being developed by huge corporations and offered commercially (e.g. Oracle Database, Microsoft SQL Server). Others are community-driven and free to use (e.g. PostgreSQL, MySQL, SQLite). You can find solutions that work on-premises (you need to install them on your own computers), and cloud products that run on machines owned by a cloud provider. Finally, there is a group of more traditional, relational database systems and relatively new world of Big Data solutions. . If you pick two random database products, they can be entirely different in terms of the underlying concepts (e.g. MySQL vs Hive vs sqlite). As you can image, for a single mind, it would be extremely hard to grasp all the possible variations. Fortunately, despite all the complexity, most of the solutions provide a common interface for interacting with data. And that interface is not that difficult to understand. It&#39;s mainly built of tables. . TODO: possibly a link to comparison of concepts behind MySQL vs Hive vs sqlite . A look inside a database . That&#39;s right. If you open a database management app, you will most likely see two things: . a list of tables, often organized in groups (those groups are called either databases or projects, depending on the product that you use), | a sql editor, where you can type in your SQL code. | . At this point it&#39;s probably quite hard to imagine. Fortunately you can see it with our own eyes. But first, you need a database. . Choose a database . Do you remember a cult movie from 1999 &quot;The Matrix&quot;? There was this very memorable scene where Neo was given a choice between two pills, the red one and the blue one. He had a one in a lifetime opportunity to decide whether he wants to go on living in lie or find out the truth. . There are two remarkable ascpects of this decision. First, one of the options feels to be objectively more &quot;correct&quot;. No one wants his life to be a lie. Secondly, after making this decision, there was no way back, which made it an extremely difficult choice. . At this point, you also need to make a decision. As already mentioned, there are many different database solutions. This book covers a couple of them (currently two, more to come!). You need to pick one that you&#39;ll move on with. Compared to the dilemma that Neo faced, the decision that you are going to make is both easier and more difficult at the same time. . It&#39;s more difficult, because there is no answer which is more &quot;correct&quot; than the others. All solutions discussed in this book are widely used. All of them have advantages and disadvantages and there is no &quot;the right choice&quot;. A good side of things is that, unlike Neo, you don&#39;t need to live with this decision for the rest of your life. Quite the opposite! You can start with one tool and later on come back to try another one. . We&#39;re jumping a bit ahead but it&#39;s important to realise that although most providers support SQL, there are multiple variations of this language. Providers often implement certain functionalities in their own way. In practice it means that code created to work with one database, unless very basic, would not work with another one. . Thankfully, there is a standard that describes the principles of the SQL language. Providers do not implement it strictly, but conveniently it&#39;s followed to some degree. Even though we have different SQL flavours, which are not identical, the core principles remain the same. As a result if you learn one SQL flavour, you should be able to easily swith to a different one (probably after some googling here and there). . TODO: examples of differences will always select, from, where but to_date might be different . Note: In this book you will be informed whenever we use a solution that is specific to a given SQL implementation. . Here&#39;s the main takeaway for you. If you have a good reason to use one implementation over the other, start with this implementation. A good example of such reason could be knowing that you will need to use a specific SQL flavour soon. Otherwise don&#39;t spend too much time thinking about it. No matter what solution you start with, you will be able to transfer almost all of your knowledge later on. . From now on we&#39;ll use SQLite to show you the process. If you want to see instructions for other databases, visit one of the links: . Big Query: (todo: in progress), | SQLite via Python: (todo: in the backlog), | PostgreSQL: (todo: in the backlog). | . TODO: think about a matrix comparing different solutions: e.g. easy to set up, cloud vs self-hosted, capabilities) . SQLite introduction . In this section you&#39;ll see how to install the SQLite database. One of the reasons that SQLite is particurarly good starting point for learning is its simplicity. The entire database is contained in just one file. Setting it up is trivial. It requires hardly any installation and no configuration at all. It&#39;s free, so you can use it to the limit without worring about the costs. Developers of the SQLite estimate that it&#39;s likely the most popular database in the entire world. They strive to keep it reliable until 2050. . Note: As for now, the book shows all the steps needed to install SQLite on Windows 10. If you&#8217;re using other OS, you might want to pick Big Query instead. Having a browser installed is the only requirement to make it work. Truth be told, SQLite is as a bit different than most of the other solutions out there. It is a fully reliable database with most of the features that you would expect from a modern solution. However it&#39;s characteristics, like storing all the data in one file, make it more suitable for: . smartphones and other devices, | websites, | data analytics. | . You may want to look for the alternative, if your project requires: . accessing the database from many computers at the same time, | simultaneous modification of the data by many users, | working with very large amounts of data (although it officially can handle up to 281 terabytes, having to keep it in one file is the bottleneck here). | . SQLite has some unusual behaviours that are distinct from what you will find anywhere else. Everytime we face such behaviour, you will be informed about it. You can also get familiar with the full list in advance using the official documentation. . There is no single perfect solution, however features of SQLite make it an amazing candidate for learning. You will set it up in no time and achieve a great ratio of &quot;using SQL in practice&quot; vs &quot;struggling to setup the database&quot;. Are you ready? Let&#39;s get it up and running :muscle: . Set up a database (SQLite) . This book provides you with two ways of creating a brand new SQLite database. The first one allows you to set up a database with just few clicks. I recommended using this approach as it&#39;s the quickest way to start workign with SQL in practice. . If you prefer, you can also do it using terminal. It&#39;s the official way, described in the documentation. It does however require some familiarity with command line interfaces. In this section, you will also see how to use this approach. . It&#39;s entirely up to which which way you want to go. If you get stuck, bear in mind that there is no reason to invest too much time at this point. In the following sections it won&#39;t matter which approach you&#39;ve chosen. . Install SQLiteStudio . Both approaches require having SQLiteStudio available on your computer at some point. So before we move on, let&#39;s install it first. SQLiteStudio is a program that provides a user-friendly interface to interact with SQLite. You can use it to actually see what&#39;s inside your database, run SQL queries, import data and many more. It&#39;s free, intuitive and very easy to start with. From this moment onwoards, it will be one of the main tools in your pocket. . Few basic steps are needed to install SQLiteStudio. . First, visit official SQLiteStudio website and click on the &quot;Download&quot; button. A new zip file &quot;sqlitestudio-{version_number}.zip&quot; will be downloaded to your computer (at the moment of writing it&#39;s &quot;sqlitestudio-3.3.3.zip&quot;). | Unzip the file and move a new &quot;SQLiteStudio&quot; directory to the destination where you would like to permanently store it (e.g. your C: drive). You can create a shortcut to &quot;SQLiteStudio.exe&quot; file for easy access e.g. from your Desktop. | Open SQLiteStudio by double-clicking on the &quot;SQLiteStudio.exe&quot;. . Tip: You may be shown a Windows warning about opening non-trusted application. &quot;SQLiteStudio&quot; is an open source project and all of its code is available for the public. As you can find out in the official GitHub repo, it&#8217;s maintained for a couple of years and many people are using it. You should be able to safely ignore the warning. Create a new database You can now create a new datbase using SQLiteStudio. Just follow the steps below. If you prefer to do it with a command line, move on to the advanced section. . | In SQLiteStudio click on the &quot;Database&quot; menu and then select &quot;Add a database&quot; option. . | Keep &quot;SQLite 3&quot; as a database type and click on a green icon &quot;Create new database file&quot;. | Remember that SQLite database is just a file? You can now specify path and name of your database file. I suggest accomodation.db as it&#39;s a pretty accurate description of the dataset that we will use later on. | By checking the &quot;Permanent&quot; option you will make sure that you see your database each time you open the SQLiteStudio. | You can &quot;Test connection&quot; before hitting &quot;OK&quot;. If everything worked fine, you should be able to find a new accomodation database in the &quot;Databases&quot; pane on the left. Moreover, a new file should be created in the path that you&#39;ve chosen before. | Advanced: create a new database with command line This section describes the process of creating a new database using an official way, described in the documentation. If for some reason you struggle to create a new database using this approach, it might be easier to use SQLiteStudio for this purpose. It&#39;s an alternative way of achieving the same results. 1. First visit the SQLite [Download Page](https://www.sqlite.org/download.html).Go to the &quot;Precompiled Binaries for Windows&quot; section and find the link for &quot;bundle of command-line tools&quot;. Click on the link to download the .zip file. 2. Unzip the downloaded file. Bacause SQLite is portable, there&#39;s no need for installation. You can already start using it. 3. Open the unzipped catalog. You should see three files inside: &quot;sqldiff.exe&quot;, &quot;sqlite3.exe&quot; and &quot;sqlite3_analyzer.exe&quot;. Double-click on the &quot;sqldiff.exe&quot; to open it. 4. You should now see a terminal where you can type in and run different SQLite commands. To create a database, you can use `.open your_path` command. You already know that SQLite database is contained in a single file. By adjusting `your_path` argument, you are able specify a path to this file. If you replace it with `./accomodation.db`, a new database will be created inside your current current directory. The full command would be `.open ./accomodation.db`. . Tip: You can provide a full path if you want, but you will need to use &quot;/&quot; instead of &quot; &quot; when specifying it. 5. You can double check if everything worked by going to the chosen folder and checking if you can see a new database file `./accomodation.db`. If it&#39;s there, your database was created successfully! . Tip: If you don&#8217;t see a database file, try typing `.databases` insinde the SQLite terminal and check once again. 6. You can open your database using &quot;Add a database&quot; option from &quot;Database&quot; menu inside SQLiteStudio. You will need to provide a path to your file. You can keep all the other options unchanged. . Import the data . In one of the previous sections I told you that most of the database solutions share a common interface which is mainly based on tables. You&#39;ve just created your first database from scratch, so you check if it&#39;s true. Right click on the accomodation database in the &quot;Databases&quot; pane and choose &quot;Connect to the database&quot; option from the menu. You should now see two icons: &quot;Tables&quot; and &quot;Views&quot;. At this point there is nothing you can actually do. Your database is empty. To start seeing some data, you need to import it first. . A common theme for all analytical projects is that you can&#39;t do analytics without data. How you actually get it, depends on the project. When you work for established company, you will most likely find the crucial datasets inside it&#39;s own, internal database. That&#39;s quite convenient as you don&#39;t have to prepare and upload the data yourself. However, eventually you may stumble upon limitations of the data at your disposal. You may also want to work on your personal project, where you start with no data at all. In such cases, you will need to import the datasets yourself. . On a high level, the process looks a follows. First, you need to find your dataset. Next, you need to download it. The final step is to import it to the database where you can process it with SQL. . Find your dataset . Ability to explore and use publically available datasets can be a very useful skill. There&#39;s no golden rule, but if you&#39;re looking for a specific dataset, you might want to check out sites like Kaggle, this repo, Dataset Search by Google or this subreddit. . In our example, we already know what data will be used. It&#39;s a dataset with information about rental prices of different apartments offered via Airbnb in Bergamo, Italy. You can find this dataset on the Inside Airbnb website. If you scroll down, you will find downloadable files with data for different cities in the world. For each city, you can get information about availibility, prices, ratings, aproximate location, amenities and many more. The coolest thing is that the data is refreshed each month, so it roughly reflects the current situation on Airbnb. If you want to learn more about Inside Airbnb and why this data was provided in the first place, make sure to visit the &quot;About&quot; page. . You can now download the data and upload it to the database, just follow the instructions below. . Scroll down to find Bergamo on the list. Download three files: &quot;listings.csv.gz&quot;, &quot;calendar.csv.gz&quot; and &quot;reviews.csv.gz&quot;. | Uncompress the files using dedicated program (7-Zip is a good one available for free). You should now see three .csv files on you computer. | Open SQLiteStudio and right click on the database name in the &quot;Databases&quot; pane or click on the &quot;Tools&quot; menu and select the &quot;Import&quot; option. . Tip: &quot;Import&quot; option will not be available if you haven&#8217;t connected to the database as described at the very beginning of this section (right click on the name of the database and &quot;Connect to the database&quot;). | You will be asked to provide database name and table name. Let&#39;s start with &quot;calendar.csv&quot; file. Select accomodation database as it&#39;s the only one created so far. You can choose whatever name you want for your table but I&#39;d suggest keeping it simple and aligned with the names of the files (&quot;calendar&quot;, &quot;listings&quot; and &quot;reviews&quot; respecitvely). Type in the &quot;calendar&quot; and click on the &quot;Next&quot; button. . Tip: A good rule of thumb for the SQL development and other areas as well is to not make things more complicated than it&#8217;s absolutely necessary. We could try to come up with better names for the tables, but having them aligned with the original files has the benefit of being an obvious solution. Imagine having not three but fifty tables and trying to figure out which file is the source of a given table if the naming is not aligned. | You are now asked to specify a couple of options: . data source type - the format of input file that you&#39;re using, &quot;CSV&quot; in our case; | input file - path to the file with the data; | text encoding - you can use default system encoding; | ignore errors - whether you want to stop the import in case of any errors, make sure to leave it unchecked; | first line represents CSV column names - whether the first row in your file represents column names; | field separator - character that is used to separate columns in your file, comma in our case; | null values - we&#39;ll explore this option later in the book, for now you can leave it unchecked. . TODO: null values - explain somewhere in the book . To make proper selection for some options, you need to know how your csv file is built. You can do it quite easily. Under the hood a .csv file is just a text document representing a table of data. Each new line represents a new row. Columns are separated with some character. Comma is the most popular choice, hence the name .csv (&quot;comma-separated values&quot;). You can also come across other separators, like semicolon (&quot;;&quot;) or tab (&quot; t&quot;). . TODO: some picture to make it more understandable - example calendar.csv . Tip: Technically the .csv file extension is not perfect fit if comma is not used as a separator. However, you&#8217;ll often see that people use it anyway, even if the separator is different. As it&#8217;s still just a text file, it will work fine. You may also stumble upon a &quot;tsv&quot; file. It&#8217;s a specific name for a file that uses tabs as separators. In most of the tools you should be able to import it using &quot;import csv&quot; option and selecting tab or &quot; t&quot; as your delimiter. To check if the first line of &quot;calendar.csv&quot; file contains header, open it using any text editor. Notepad is the simplest option. Next, check content of the first line of your file. You will see values similar to: &quot;listing_id&quot;, &quot;date&quot;, &quot;available&quot;, &quot;price&quot;, etc. which definitely look like a column names. When importing this file, make sure to check &quot;first line represents CSV column names&quot; option in SQLiteStudio. . Last but not least, field separator. Looking at couple of the first rows, you can clearly see that values are separated with commas, e.g.: . row 1: listing_id,date,available,price,adjusted_price,minimum_nights,maximum_nights; | row 2: 15526,2021-03-30,f, $95.00**,**$95.00,2,1125. | . Make sure to select &quot;, (comma)&quot; as a field separator. . | . | Click &quot;Finish&quot; to complete the process. After a short moment, you will see a new table in your database :champagne::champagne::champagne: . | Try to repeat the process for two remaining files: listings.csv and reviews.csv. In the end you should have three tables in your database &quot;calendar&quot;, &quot;listings&quot; and &quot;reviews&quot;. | Congratulations, you&#39;ve just completed the first step to get your data project up and running! As you may notice, it&#39;s a very simple dataset with just three tables of data. We&#39;ll switch to more complex datasets later in the book. . See the big picture . Even though very simple, we can treat our database as an approximation of an actual, analytical database. Don&#39;t get me wrong. Enterprise-grade solutions in real companies are obviously much more complex. They consist of multiple subject-specific databases (a.k.a projects) with dozens of tables, many of them being much bigger than ours. However, there are some commonalities from the user perspective. If you take a look inside, no matter if it&#39;s an actual business database or a dummy example, you will most likely see a common structure where tables are the main building block. . TODO: we can link here an info about analytical vs transactional db . Tables are generally used to store data about objects that are essential for the organization. Which objects are important depends of course on the type of organization. The area of interest will be completely different for online store and university. Whereas things like transactions, page views, marketing campaigns and goods in stock will be the most important for the first one, the academic institution will rather focus on students, teachers, courses, class rooms, grades and everything around that. . TODO: show two sample schemas of db, shortly explain them: below you can see schemas of two db, boxes represent ... / or just a list of tables . You can expect that table related to a given object will have the most important information about it. Taking &quot;transactions&quot; table as an example, it should allow you to identify each transaction and find out when it happened, what exactly was sold, at what price, who bought it, etc. You will work with different tables throughout this book, which will give you a good idea of what you can expect to find inside them. . TODO: diagram with schema of a table: transactions (rows and columns) . Each table in a database is composed of two main elements, rows and columns. Columns are used to represent features describing objects stored in a table. Using our example of &quot;transactions&quot; table, it&#39;s likely to have following columns: &quot;transaction_id&quot;, &quot;transaction_date&quot;, &quot;transaction_item&quot;, &quot;price&quot; and &quot;buyer_id&quot;. . TODO: a look inside an actual table - with columns highlighted TODO: tip: names of the tables and &quot;_&quot; . Rows on the other hand, most commonly, represent objects stored in a table. For example a &quot;transaction&quot; table could have a separate row for each transaction while an &quot;employees&quot; table would keep a separate line for each employee. Each course tought at university, would have it&#39;s own record too. You get the idea :wink: . TODO: a look inside an actual table - with rows highlighted . You should now have a fairly good understanding of what a table is. That&#39;s crucial because earlier in the book we&#39;ve said that the interface that you will use is mostly built of tables. I hope that you now have a feeling of what it means. If you think about it, a database looks a lot like a collection of tables. Having this model in mind will help you a lot when learning SQL. If you don&#39;t see it yet, don&#39;t worry, it will click. You can try going over this section once again or looking at some sample dummy databases online (this is a good place to start). . Tip: It&#8217;s fair to stress that choice of words is not a coincidence here. A database looks like a collection of tables. There is of course a lot of complexity hidden from our eyes. Once again, even though that&#8217;s a simplification, it&#8217;s one worth having as it makes working with SQL much more intuitive and convenient. To close this subject it&#39;s worth to note that one organization is likely to use multiple databases at the same time. Companies are built of numerous domains, like: sales, operations, finance, marketing, HR, etc. These domains are likely to be managed by different teams and to be supported by different IT systems. In such cases it often makes sense to split the data into several theme-oriented databases. . TODO: hierarchy schema: multiple databases, database, table, row/column (maybe sack analogy) . The goal of this section was to prepare you to work with the database that you&#39;ve just created. The next step is to see the concepts that we&#39;ve just discussed in practice using our accommodation database. At this point, SQL is needed to achieve that. . Bacis interactions with data using SQL . Running the query . TODO: maybe simple how to see what&#39;s inside? . At this point, you understand that although there are many different database solutions, they very often share a similar interface, mainly built of tables. You can see it by opening and browsing through your database management app. Another interface that is common for most of the database systems is SQL. . SQL is a language that allows you to interact with a data inside a database. You can use it to do all kinds of manipulations, like: aggregations, custom calculations, filtering, sorting and so on. Let&#39;s go through a simple SQL query to see how it feels to use it. A query is a piece of SQL code that you can use to get data from a database. You can use it for example to feed data into report. This particular query was used to create a map in our report showing rental prices on Airbnb. . You will now see what I meant by saying that SQL is such a friendly tool. It&#39;s a declarative language, which means that you don&#39;t need to specify all the low-lewel operations to get the desired result. You just need to describe the final outcome and the database will figure out the rest for you. If you have some basic knowledge of English, you may be suprised that a simple SQL query can be nearly understandable to you. . TODO: replace queries with the new dataset . SELECT country, date, daily_vaccinations FROM covid.country_vaccinations WHERE COUNTRY = &#39;United States&#39; ORDER BY date DESC; . It almost feels like a pseudocode. The cool thing is that it&#39;s an actual working query. You start with choosing or selecting columns that you want to use. Next, you specify which database and which table you want to get your data from. You only request rows where certain condition is met. Finally you put your results into specific order. You probably wouldn&#39;t be able to write it yourself but it makes an intuitive sence. We&#39;ll spend much more time learning how to build your own sql queries later in the book. . You can try to execute this query inside the SQLiteStudio. Click on Tools in the top menu and select &quot;Open SQL editor&quot;. You will see a new window where you can type some text. Copy or even better rewrite the SQL code inside this editor. . Tip: Although copying and rewriting the code will provide you with the same result, typing the code yourself can be an effective learning technique. . To execute the query and see results you can either click on the &quot;play button&quot; or hit &quot;F9&quot; on your keyboard. Outcome will be displayed in a table below the editor. As expected, you should see information about daily vaccinations in USA sorted descending by date. . TODO: consider intro to creating SQL queries here already - but I&#39;m a bit reluctant (maybe very basic: if you want to use diff table change this, if you want to change columns, change that) . one of the tables that we have is called ... you could expect that it has information about xyz . Importing data to the BI tool . Creating and sharing the report . Formatting the query . If this is the first time you use SQL code, you&#39;ll probably start to have questions. . Does capitalization matter? | Do I need to keep split the code into lines in the same way? | Will it work if I don&#39;t indent? | Is semicolon at the end required? | . Before I give you answers, let me emphasize how cool it is to write code. In real or &quot;physical&quot; life, if you try some approach that doesn&#39;t work, most often than not, you break something. Usually it&#39;s painful because you need to either fix or replace whatever is broken. Writing code is a completely different world. Very often the worst thing that can happen is seeing an error. It&#39;s almost like you are in a wonderland where you can push your imagination to the limits withouth caring too much about consequences. Of course if you push to hard, you are capable of causing some damage but I can assure you that it won&#39;t happen while writing basic SQL queries. Having say that, I&#39;d strongly recommend you pausing here for a moment an testing yourself what can happen if you violate any of the assumptions from the list above. . TODO: some graphic to avoid spoilers? . Ready to find out the answer? Try using the code below and see what happens. . select country, date, daily_vaccinations from covid.country_vaccinations where country = &#39;United States&#39; order by date desc; . Good news is that nothing exploded. Even better news is that it works exactly the same as the previous version. If it doesn&#39;t matter why bother splitting the code or making indentations? In short, all those things do not matter for the computer. The thing is that we&#39;re not computers. It&#39;s much more easy and predictable to read, modify and work with the query if it&#39;s nicely formatted. Especially if it&#39;s a long and a complex one. You can already notice the difference in the simple example above. Imagine having not ten but a hundred lines of code that you need to update. . Your future self will probably not thank you if you take a good care about formatting. But you can be sure that it will curse if you don&#39;t. That&#39;s why this book follows a couple of simple principles when formatting code. . Create a new line for each main keyword (SELECT, FROM, WHERE, ORDER BY), column, where condition, expression. | Indent everything between main keywords. | Use semicolon to split many queries written one after the other (it makes your editor aware that these are separate pieces of code). | Capitalize keywords (that&#39;s my latest principle that I&#39;m least strict about). | This is a set of principles that I&#39;ve worked out using SQL for years. They tend to work very well for me. It&#39;s not fully comprehensive list and definitely not written in stone. As fair as I know, there is no one standard that everyone should follow. Feel free to experiment and modify the assumptions above to craft your own formatting style. As long as you keep your future self and your colleagues in mind, you should be fine. . Share your work . TODO: adjust to the context already given . When you have your data prepared, it&#39;s time to share it with your audience. You can do it in many different ways. One of the most effective ones is creating an interactive dashboard. In the next section you&#39;ll see how to set up a bi tool on your machine to start working on the first vizualizations. This section is not strictly related with the SQL language itself so you might be tempted to skip it over. Having in mind that presenting the data is one of the most important parts of the data project, I&#39;d recommend at least taking a quick look. This way you&#39;ll build a high-level understanding of the process. . Install a BI tool . TODO: adjust to the context already given TODO: maybe less details for obvious instructoins . There are plenty of great BI tools on the market. They differ in features, pricing models and ease of use. We won&#39;t compare them here as this river is vastly too deep to go into. Instead, we&#39;ll use one tool, PowerBi in our case. It&#39;s very robust, popular and fast developing. In short, it&#39;s a tool that&#39;s worth knowing in general. Plus it&#39;s free to install on your computer, although buying a commercial license is required to share your work with others. . You can install PowerBi from the official Microsoft website. Click the &quot;Download&quot; button and follow the instruction. . After succesfull installation, you should be able to open PowerBI Desktop. You&#39;ll see some prompts that will help you to log in or buy a licencse if you need one. You can ignore them at the moment to go to the main interface of the tool. . TODO: screenshot: prompt TODO: screenshot: you should see similar interface . If you select &quot;Get data&quot; from the &quot;Home&quot; menu, you&#39;ll see that PowerBI works with many different data sources out of the box, without further configuration required. . TODO: screenshot . Unfortunately, SQLite is an exception in this case. To make the two applications talk to each other, you need to install additional driver that you can find here. Depending on whether you&#39;are on 32 or 64-bit version of windows, choose either &quot;sqliteodbc.exe&quot; or &quot;sqliteodbc_w64.exe&quot;. After successfull installation, you&#39;ll be able to connect your PowerBI Desktop app to the SQLite database prepared in the previous step. . Connect BI tool to the database . There&#39;s one step that will make your life much easier you take care about it right know. You can define a DSN (data source name) that you&#39;ll be able to reuse in the future. This way you&#39;ll avoid providing a configuration each time you want to connect to your database. . To achieve that, open windows start menu and search for &quot;ODBC Data Sources&quot; (32- or 64-bit depending on your system). Open it and click on the &quot;Add&quot; button. After successful installation in the previous step, you should be able to see &quot;SQLite3 ODBC Driver&quot; option. Select it and click &quot;Finish&quot;. You&#39;ll see a window where you need to provide two kinds of information: Data Source Name and Database Name. Data Source Name is just a name that you can define for your data source. You can choose whatever you want, I&#39;d suggest using &quot;covid&quot; if you want to be aligned with the book. In Database Name you need to provide a path to your database. You can find the file using &quot;Browse...&quot; button or provide it on your own. Confirm your choices by clicking &quot;Ok&quot; button and you&#39;re good to go. . Open your PowerBI Desktop app. To make the connection, go to the &quot;Home&quot; menu and click on the &quot;Get data&quot; icon. Choose &quot;more...&quot; to open a new window where you&#39;ll be able to find &quot;ODBC&quot; option. After selecting it, click on the &quot;Connect&quot; button. You should be able to see the name of data source that you&#39;ve just defined. Select it and expand &quot;Advanced options&quot;. . In the SQL statement box, you can use a custom sql to extract the data. If you don&#39;t specify it, you&#39;ll be able to use the entire table. That&#39;s good for our small, example dataset. Probably not very good for big, productional data sources. Let&#39;s use the query from the previous sections. Because we are connecting specifically to the covid db, we need to remove covid. prefix in the from clause. . SELECT country, date, daily_vaccinations FROM country_vaccinations WHERE COUNTRY = &#39;United States&#39; ORDER BY date DESC; . To complete the process, paste the above query and hit &quot;Ok&quot;. Make sure that you understand how it differs from the version used in SQLiteStudio. When asked about password, switch to the &quot;Default or Custom&quot; option in the menu, leave all the field blank and continue. If everything went right, you&#39;ll see a table with sample data. Click &quot;Load&quot; to import it to PowerBI. After the whole process you will see your data import in the &quot;Fields&quot; menu. . Prepare your first dashboard . The last step is to start working on your dashboard. PowerBi allows you to create all kinds of visualizations, like: tables, charts, maps or even animations. In this book we won&#39;t focus too much on the PowerBI itself. We&#39;ll just create a basic chart to complete our mini data project and see the big picture. Feel free to play around with different kinds of visualizations if you want. You can try to re-create a dashboard that I&#39;ve shown you at the very beginning. . TODO: recommend some resource about PowerBI TODO: instruction to re-create my dashboard (video??) TODO: one more sql to create a map?? . If you have your PowerBI open, you can go to the &quot;Fields&quot; menu, right-click on your query and &quot;Edit query&quot;. If you do so, you&#39;ll see that all of our columns are of the &quot;string&quot; type. That&#39;s not what we want, as we&#39;d like PowerBI to be able to e.g. sum numeric values or understand the dates properly. You can change it directly in PowerBI by clicking on the data type icon and choosing a proper option. TODO: it&#39;s a good moment to start talking about data types . The last step is to create a chart itself. In our case we&#39;ll prepare a very basic table. Select a table icon from the &quot;Visualizations&quot; pane and and check &quot;daily_vaccinations&quot; and &quot;date&quot; fields from your data source. PowerBI will place them on a table for you. . That&#39;s it, you&#39;ve just created you first end-to-end data project :rocket: You&#39;ve set up a database, imported your data, run a sql query and prepared a first visualization. You can be proud of yourself :cocktail: In the next sections we&#39;ll dive deeper in particular parts of the flow. We&#39;ll focus of course on the sql query preparation. . Teach others . Ever heard of the &quot;see one, do one, teach one&quot; method? It&#39;s used to increase the amount of information that you retain while learning. It&#39;s especially common in the medical training. As you only retain 10% of what you read and 20% of what you hear, we&#39;re looking for a ways to use your time in a more effective way. . TODO: remove poor jokes . You might have not noticed but you&#39;ve just been guided to complete the two first steps of the process. You&#39;ve seen an example of a data product and you&#39;ve done it yourself. So the last step is to teach others about what you&#39;ve just learned. You can try explaining it to someone close to you. Don&#39;t worry, I&#39;m a realist. I&#39;m aware that chances are you either: a) do not have such person available at hand, b) you have such person but you want to keep it that way, so you prefer to avoid forcing that person to listen about coding. . Fair enough. Fortunately, there are plenty of people who could actualy use your help already at this point. I&#39;ve set up a space where you can see questions related to the material covered in this section. Do your best to answer them and publish your answers so other people can see them. Others can upvote your answer if they find it helpful. You can do the same with other responses. To ensure that you get as much as possible from the time that you&#39;ve already invested into the learning process, I&#39;d really encourage you to spend some time to: . publish your own response without peeking at the answers already provided, | take a look at the responses provided by others, to verify your understanding. | . TODO: set up this space TODO: provide a link to this space TODO: list of questions . Now that you have high level understanding of the process and SQL in general, we can move on to the second part. In that section we&#39;ll dive deep into specific concepts to make your more comfortable creating your own queries. .",
            "url": "https://creaitive.studio/sql/2021/03/18/01_intro.html",
            "relUrl": "/sql/2021/03/18/01_intro.html",
            "date": " • Mar 18, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website was created by creaitive.studio - self learning for everyone. .",
          "url": "https://creaitive.studio/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://creaitive.studio/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}